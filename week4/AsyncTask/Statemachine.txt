using System;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security;
using System.Security.Permissions;
using System.Threading.Tasks;

[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.Default | DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints | DebuggableAttribute.DebuggingModes.EnableEditAndContinue | DebuggableAttribute.DebuggingModes.DisableOptimizations)]
[assembly: SecurityPermission(SecurityAction.RequestMinimum, SkipVerification = true)]
[assembly: AssemblyVersion("0.0.0.0")]
[module: UnverifiableCode]
namespace AsyncTask
{
    public class ImageDownloader
    {
        #region creation of objects from other packages
        [CompilerGenerated]
        private sealed class <>c__DisplayClass0_0 // for Uri
        {
            public Uri uri;
        }

        [CompilerGenerated]
        private sealed class <>c__DisplayClass0_1 // for WebClient
        {
            public WebClient wc;

            public <>c__DisplayClass0_0 CS$<>8__locals1;
        }

        [CompilerGenerated]
        private sealed class <>c__DisplayClass0_2 // for DownloadAsync from WebClient
        {
            public string fileName;

            public <>c__DisplayClass0_1 CS$<>8__locals2;

            internal void <Download>b__0()
            {
                CS$<>8__locals2.wc.DownloadFileAsync(CS$<>8__locals2.CS$<>8__locals1.uri, fileName);
            }
        }
        #endregion
        
        #region Download logic
        [CompilerGenerated]
        private sealed class <Download>d__0 : IAsyncStateMachine
        {
            #region Declaring variables needed for the method
            public int <>1__state;

            public AsyncTaskMethodBuilder <>t__builder; // Task builder

            public string url;

            private <>c__DisplayClass0_0 <>8__1;

            private <>c__DisplayClass0_1 <>8__2;

            private <>c__DisplayClass0_2 <>8__3;

            private byte[] <data>5__4;

            private TaskAwaiter <>u__1;
            #endregion            

            private void MoveNext()
            {
                int num = <>1__state;
                try // entering the logic of async Download method
                {
                    if (num != 0)
                    {
                        <>8__1 = new <>c__DisplayClass0_0();
                        <>8__1.uri = new Uri(url);
                        <>8__2 = new <>c__DisplayClass0_1();
                        <>8__2.CS$<>8__locals1 = <>8__1;
                        <>8__2.wc = new WebClient();
                    }
                    try // entering using statement
                    {
                        TaskAwaiter awaiter;
                        if (num != 0) // not sure what it checks but I think it is the identificator that everything is ok so far
                        {
                            <>8__3 = new <>c__DisplayClass0_2();
                            <>8__3.CS$<>8__locals2 = <>8__2;
                            <data>5__4 = <>8__3.CS$<>8__locals2.wc.DownloadData(<>8__3.CS$<>8__locals2.CS$<>8__locals1.uri);
                            <>8__3.fileName = string.Concat(RandomString(10), ".jpeg");
                            awaiter = Task.Run(new Action(<>8__3.<Download>b__0)).GetAwaiter(); // invoking DownloadAsync method from WebClient
                            if (!awaiter.IsCompleted) // call AwaitUnsafeOnCompleted if awaiter doesnt get response
                            {
                                num = (<>1__state = 0);
                                <>u__1 = awaiter;
                                <Download>d__0 stateMachine = this;
                                <>t__builder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);
                                return;
                            }
                        }
                        else // probably something went wrong and it sets everything to default
                        {
                            awaiter = <>u__1;
                            <>u__1 = default(TaskAwaiter);
                            num = (<>1__state = -1);
                        }
                        awaiter.GetResult();
                        <>8__3 = null;
                        <data>5__4 = null; // finish of the logic inside using
                    }
                    finally
                    {
                        if (num < 0 && <>8__2.wc != null)
                        {
                            ((IDisposable)<>8__2.wc).Dispose(); // disposing webclient and preparing for exiting using statement
                        }
                    }
                    <>8__2 = null;
                } // exit using
                catch (Exception exception) // exception handling
                {
                    <>1__state = -2;
                    <>8__1 = null;
                    <>t__builder.SetException(exception);
                    return;
                }
                <>1__state = -2;
                <>8__1 = null;
                <>t__builder.SetResult(); // finish of the Download method logic
            }

            void IAsyncStateMachine.MoveNext()
            {
                //ILSpy generated this explicit interface implementation from .override directive in MoveNext
                this.MoveNext();
            }

            [DebuggerHidden]
            private void SetStateMachine(IAsyncStateMachine stateMachine)
            {
            }

            void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine stateMachine)
            {
                //ILSpy generated this explicit interface implementation from .override directive in SetStateMachine
                this.SetStateMachine(stateMachine);
            }
        }
        #endregion
    
        #region RandomString logic
        [Serializable]
        [CompilerGenerated]
        private sealed class <>c
        {
            public static readonly <>c <>9 = new <>c();

            public static Func<string, char> <>9__2_0;

            internal char <RandomString>b__2_0(string s)
            {
                return s[random.Next(s.Length)];
            }
        }
        #endregion

        private static Random random = new Random();

        #region Download method that calls the logic above
        [AsyncStateMachine(typeof(<Download>d__0))]
        [DebuggerStepThrough]
        public static Task Download(string url)
        {
            <Download>d__0 stateMachine = new <Download>d__0(); // created the instance of sealed class above
            stateMachine.<>t__builder = AsyncTaskMethodBuilder.Create();
            stateMachine.url = url;
            stateMachine.<>1__state = -1;
            stateMachine.<>t__builder.Start(ref stateMachine);
            return stateMachine.<>t__builder.Task;
        }
        #endregion

        #region RandomString method that calls the logic above
        private static string RandomString(int length)
        {
            return new string(Enumerable.ToArray(Enumerable.Select(Enumerable.Repeat("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", length), <>c.<>9__2_0 ?? (<>c.<>9__2_0 = new Func<string, char>(<>c.<>9.<RandomString>b__2_0)))));
        }
        #endregion
    }
}
